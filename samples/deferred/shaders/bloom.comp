#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba16f) uniform readonly image2D inputImage;
layout (binding = 1, rgba16f) uniform image2D resultImage;

layout(push_constant) uniform PushConsts {
    vec2 texSize;
    int dir;
    float scale;
    float strength;
} pc;

void main(void)
{
	// From the OpenGL Super bible
	const float weights[] = float[](0.0024499299678342,
									0.0043538453346397,
									0.0073599963704157,
									0.0118349786570722,
									0.0181026699707781,
									0.0263392293891488,
									0.0364543006660986,
									0.0479932050577658,
									0.0601029809166942,
									0.0715974486241365,
									0.0811305381519717,
									0.0874493212267511,
									0.0896631113333857,
									0.0874493212267511,
									0.0811305381519717,
									0.0715974486241365,
									0.0601029809166942,
									0.0479932050577658,
									0.0364543006660986,
									0.0263392293891488,
									0.0181026699707781,
									0.0118349786570722,
									0.0073599963704157,
									0.0043538453346397,
									0.0024499299678342);
									

	float ar = 1.0;
    vec4 color = vec4(0.0);
    
	// Aspect ratio for vertical blur pass
	if (pc.dir == 1)
		ar = pc.texSize.y / pc.texSize.x;
        
    vec3 c = imageLoad (inputImage, ivec2(gl_GlobalInvocationID.yx)).rgb;
    
    float lum = (0.299*c.r + 0.587*c.g + 0.114*c.b);
    if (lum<0.3 && pc.dir == 0)
        imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), color);    
    else {
    	vec2 P = gl_GlobalInvocationID.yx - vec2(0, (weights.length() >> 1) * ar * pc.scale);

    	
    	for (int i = 0; i < weights.length(); i++)
    	{
    		vec2 dv = vec2(0.0, i * pc.scale) * ar;
    		color += imageLoad (inputImage, ivec2(P + dv)) * weights[i] * pc.strength;
    	}
        
        imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), color);
    }
}